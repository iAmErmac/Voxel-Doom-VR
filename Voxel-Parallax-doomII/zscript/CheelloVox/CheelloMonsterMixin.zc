//===========================================================================
//
// CHEELLO VOXEL DOOM
//
// ZScript code: Copyright (C) 2022 - 2023 Nash Muhandes
//
// License: MIT
//
//===========================================================================

//===========================================================================
//
// CheelloMonsterMixin
//
//===========================================================================

mixin class CheelloMonsterMixin
{
	// for smooth rotation turning speeds, please only use numbers divisible by 45 to prevent angle-snapping bugs
	// (1, 3, 5, 9, 15, 45)
	const SMOOTH_CHASE_TURN_SPEED = 9;
	const SMOOTH_ATTACK_TURN_SPEED = 45;

	bool shouldResetAngle;
	bool isFacingTarget;

	bool deathSlopeAligned;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze &&isFrozen())
			return;

		if (Health > 0)
		{
			// smooth angle rotation
			bool smooth = cheello_smoothmonsterrotation;

			bInterpolateAngles = smooth;

			if (!InStateSequence(curState, SeeState))
				shouldResetAngle = true;

			State PainState = ResolveState('Pain');
			if (PainState && InStateSequence(curState, PainState))
			{
				shouldResetAngle = true;

				// fix angle jitter caused from entering the pain state while previously in an attack state
				if (isFacingTarget)
					isFacingTarget = false;
			}

			if (smooth)
			{
				if (InStateSequence(curState, SeeState) && !isFacingTarget)
				{
					if (shouldResetAngle)
					{
						A_ResetAngles();
						shouldResetAngle = false;
					}

					if (movedir < DI_NODIR)
					{
						double delta = deltaangle(Angle, (movedir * 45));
						if (delta < 0)
							A_SetAngle(Angle - SMOOTH_CHASE_TURN_SPEED, SPF_INTERPOLATE);
						else if (delta > 0)
							A_SetAngle(Angle + SMOOTH_CHASE_TURN_SPEED, SPF_INTERPOLATE);
					}
				}
				else if (isFacingTarget)
				{
					A_TurnToTarget();
				}
			}

			// adjust flying monster pitch
			if (cheello_monsterpitchtotarget &&
				(self is "Cacodemon" || self is "PainElemental")
				&& Target
				&& (InStateSequence(curState, SeeState) || InStateSequence(curState, MeleeState) || InStateSequence(curState, MissileState)))
			{
				A_SetPitch(PitchTo(Target, Height * 0.5, Target.Height * 0.5), SPF_INTERPOLATE);
			}
		}

		// adjust corpse orientation on slopes
		if (Health <= 0 && !deathSlopeAligned)
		{
			CheelloVoxStatics.AlignToPlane(self);
			deathSlopeAligned = true;
		}
		else if (Health > 0 && deathSlopeAligned)
		{
			Pitch = 0;
			Roll = 0;
			deathSlopeAligned = false;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	protected void A_ResetAngles(void)
	{
		A_SetAngle(floor(Angle / 45) * 45., SPF_INTERPOLATE);

		if (!cheello_monsterpitchtotarget)
		{
			if (Pitch != 0)
				A_SetPitch(0, SPF_INTERPOLATE);

			if (Roll != 0)
				A_SetRoll(0, SPF_INTERPOLATE);
		}
	}

	protected void A_TurnTowards(double angleTarget, double spd)
	{
		double angDiff = deltaangle(Angle, angleTarget);
		double angleChange = angDiff < 0 ? max(-spd, angDiff) : min(spd, angDiff);
		A_SetAngle(Angle + angleChange, SPF_INTERPOLATE);
	}

	protected void A_TurnToTarget(void)
	{
		if (!Target)
			return;

		double spd = SMOOTH_ATTACK_TURN_SPEED;
		Vector3 tPos = Target.Pos;
		Vector3 sCoords = LevelLocals.SphericalCoords(Pos, tPos, (Angle, Pitch));
		double angleTarget = Angle - sCoords.X;
		A_TurnTowards(angleTarget, spd);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	action void A_CheelloChase(void)
	{
		bool smooth = cheello_smoothmonsterrotation;

		int chaseFlags = 0;

		if (smooth)
			chaseFlags |= CHF_NODIRECTIONTURN;

		// flags are ignored by default unless the Melee and Missile states are specified... >:(
		if (FriendPlayer > 0 && !Target)
			A_Wander(chaseFlags);
		else
			A_Chase('Melee', 'Missile', chaseFlags);
	}

	action void A_CheelloFaceTarget(void)
	{
		bool smooth = cheello_smoothmonsterrotation;
		if (!smooth)
		{
			A_FaceTarget();
			return;
		}

		invoker.isFacingTarget = true;
	}

	action void A_CheelloStopFacingTarget(void)
	{
		A_FaceTarget();
		invoker.isFacingTarget = false;
	}
}
