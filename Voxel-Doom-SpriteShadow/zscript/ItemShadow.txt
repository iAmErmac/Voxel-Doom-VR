
Class Z_ItemShadow : Actor
{
	Default
	{
		RenderStyle "Add";
		height 2;
		radius 2;
		+NOBLOCKMAP
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOBLOOD
	}
	
	Actor itemToFollow;
	String lightID;
	bool blobFaded;
	double itemRadius;
	int BLOBSHADOW_FLAGS;
	
	override void PostBeginPlay()
	{
		updateSettings();
	}
	
	override void Tick()
	{
		// hide when item is picked up
		if(!itemToFollow || Inventory(itemToFollow).owner)
		{
			SetOrigin((-9999,-9999,-9999), false);
			return;
		}
		
		updateBlobRadius();
		SetOrigin((itemToFollow.pos.xy, itemToFollow.FloorZ+5), false);
		A_AttachLight(lightID, DynamicLight.PointLight, "FF FF FF", itemRadius, itemRadius, BLOBSHADOW_FLAGS);
		
		// check for settings update
		if(GetAge() && GetAge() % (5 * 35)) updateSettings();
		
		Super.Tick();
	}
	
	void updateSettings()
	{
		Playerinfo p = Players[ConsolePlayer];
		if(!p) return;
		
		let blobFaded = CVar.GetCVar("cl_blobshadowfaded", p).GetInt();
		BLOBSHADOW_FLAGS = DYNAMICLIGHT.LF_SUBTRACTIVE | DYNAMICLIGHT.LF_DONTLIGHTSELF | DYNAMICLIGHT.LF_DONTLIGHTACTORS;
		if(blobFaded) BLOBSHADOW_FLAGS |= DYNAMICLIGHT.LF_ATTENUATE;
	}
	
	void selfDestruct()
	{
		A_RemoveLight(lightID);
		destroy();
	}
	
	void updateBlobRadius()
	{
		Playerinfo p = Players[ConsolePlayer];
		if(!p) return;
		
		let minRadius = CVar.GetCVar("cl_itemshadowminrad", p).GetInt();
		itemRadius = getItemRadius(itemToFollow);
		if(blobFaded)
			itemRadius = itemRadius * .5;
		else
			itemRadius = itemRadius * .3;
		if(itemRadius < minRadius) itemRadius = minRadius;
	}
	
	double getItemRadius(Actor item)
	{
		double Radius = item.Radius;
		
		TextureID tex;
		bool flipped;
		Vector2 scale;
		[tex, flipped, scale] = item.CurState.GetSpriteTexture(0, scale: item.Scale);
		
		if (tex.IsValid())
		{
			let texSize = TexMan.GetScaledSize(tex);
			let r = texSize.X * scale.X;
			if (r >= 2.) Radius = r;
		}
		
		return Radius;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 1;
		wait;
	}
}

//===========================================================================
//
//
//
//
//===========================================================================

class ItemShadowHandler : EventHandler
{
	transient CVar cvItemShadow;
	transient CVar cvShadowDistance;
	transient CVar cvMaxShadows;
	transient CVar cvRefreshTime;

	double shadowDistOld, shadowDistNew;

	override void OnRegister()
	{
		Playerinfo p = Players[ConsolePlayer];
		if(!p) return;
		
		cvItemShadow = CVar.GetCVar("cl_itemshadow", p);
		cvShadowDistance = CVar.GetCVar("cl_itemshadowdistance", p);
		cvMaxShadows = CVar.GetCVar("cl_maxitemshadows", p);
		cvRefreshTime = CVar.GetCVar("cl_voxelshadowrefresh", p);
	}

	//===========================================================================
	//
	//
	//
	//
	//===========================================================================

	override void WorldTick(void)
	{
		if (!cvItemShadow.GetBool()) return;
		
		int maxDist = cvShadowDistance.GetInt();
		if (!maxDist) return;

		PlayerInfo p = players[consoleplayer];
		if (!p) return;
		
		// cutting down the check timer to save resource for performance
		// only execute the rest of the codes once every specific tics
		double refreshTime = cvRefreshTime.GetFloat();
		if(refreshTime && level.maptime % int(refreshTime * 35) != 0) return;

		// look for items around you
		
		double checkDist;
		int shadowCount;
		int maxCount = cvMaxShadows.GetInt();
		
		clearShadowCasters();
		
		// 1st iteration - search for 1/3 of max radius (closer to player)
		if(maxDist > 100)
		{
			if(maxDist/3 < 100)
				checkDist = 100;
			else
				checkDist = maxDist/3;
		}
		else
			checkDist = maxDist;
		
		shadowCount = manageShadowCasters(checkDist, 0, maxCount);
		
		// if possible then 2nd iteration - search for 2/3 of max radius
		if(checkDist == maxDist)
			return;
		else
		{
			if(maxDist - checkDist < 100)
				checkDist = maxDist;
			else
				checkDist = (maxDist - checkDist) / 2 + checkDist;
		}
		
		if(shadowCount < maxCount)
		{
			maxCount = maxCount - shadowCount;
			shadowCount = manageShadowCasters(checkDist, shadowCount, maxCount);
		}
		else
			return;
		
		// if possible then 3rd iteration - for max radius
		if(checkDist == maxDist)
			return;
		else
			checkDist = maxDist;
		
		if(shadowCount < maxCount)
		{
			maxCount = maxCount - shadowCount;
			shadowCount = manageShadowCasters(checkDist, shadowCount, maxCount);
		}
		
		clearItemMarkers();
		
		// don't need to do cleanups too frequently. 5 sec delay is good enough
		if(level.maptime % int(5 * 35) != 0)
		{
			let bShadowList = BlobShadowList(p.mo.FindInventory("BlobShadowList"));
			bShadowList.cleanupItemSHadows();
		}
	}

	//===========================================================================
	//
	//
	//
	//
	//===========================================================================
	
	int manageShadowCasters(double maxDist, int count, int maxCount)
	{
		PlayerInfo p = players[consoleplayer];
		if (!p) return 0;
		
		let bShadowList = BlobShadowList(p.mo.FindInventory("BlobShadowList"));
		if(!bShadowList) return 0;
		
		ThinkerIterator it = ThinkerIterator.Create("Inventory", Thinker.STAT_DEFAULT);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			// intentionally using 2D distance because it's faster
			// also check if in line of sight of player
			if (mo.Distance2DSquared(p.mo) <= maxDist ** 2 && mo.CheckSight(p.mo) && inPlayerLOS(mo) && mo.health != 6066)
			{
				count++;
				if(count >= maxCount) return count;
				let smo = Z_ItemShadow(bShadowList.getItemShadowCaster(count));
				smo.itemToFollow = mo;
				smo.bInvisible = false;
				mo.health = 6066;
			}
		}
		
		return count;
	}
	
	void clearItemMarkers()
	{
		ThinkerIterator it = ThinkerIterator.Create("Inventory", Thinker.STAT_DEFAULT);
		Actor mo;
		int count;
		while (mo = Actor(it.Next()))
		{
			if(mo.health == 6066)
				mo.health = mo.default.health;
		}
	}
	
	void clearShadowCasters()
	{
		PlayerInfo p = players[consoleplayer];
		if (!p) return;
		let bShadowList = BlobShadowList(p.mo.FindInventory("BlobShadowList"));
		bShadowList.hideItemShadows();
	}
	
	bool inPlayerLOS(actor mo)
	{
		PlayerInfo p = players[consoleplayer];
		if (!p) return false;
		
		if(!mo.CheckSight(p.mo)) return false;
		
		// we will spawn a dummy actor right in front of player
		// if distance from dummy to target longer than player to target then the target is behind player
		let los_dummy = Actor.Spawn("BulletPuff", p.mo.Vec3Angle(10, p.mo.angle, p.mo.viewheight));
		bool in_LOS = mo.Distance2D(p.mo) > mo.Distance2D(los_dummy);
		los_dummy.destroy();
		return in_LOS;
	}
}
